================
Multiplication before addition
================

const PRECEDENCE: Integer = 2 + 3 * 4

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier)))
      (expression
        (binary_add
          (primary_expression
            (literal
              (integer)))
          (binary_multiply
            (primary_expression
              (literal
                (integer)))
            (primary_expression
              (literal
                (integer)))))))))

================
Division before subtraction
================

const PRECEDENCE2: Integer = 10 - 8 / 2

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier)))
      (expression
        (binary_subtract
          (primary_expression
            (literal
              (integer)))
          (binary_divide
            (primary_expression
              (literal
                (integer)))
            (primary_expression
              (literal
                (integer)))))))))

================
Exponentiation before multiplication
================

const PRECEDENCE3: Integer = 2 * 3 ** 2

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier)))
      (expression
        (binary_multiply
          (primary_expression
            (literal
              (integer)))
          (binary_exponent
            (primary_expression
              (literal
                (integer)))
            (primary_expression
              (literal
                (integer)))))))))

================
Right associativity of exponentiation
================

const RIGHT_ASSOC: Integer = 2 ** 3 ** 2

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier)))
      (expression
        (binary_exponent
          (primary_expression
            (literal
              (integer)))
          (binary_exponent
            (primary_expression
              (literal
                (integer)))
            (primary_expression
              (literal
                (integer)))))))))

================
Left associativity of addition
================

const LEFT_ASSOC: Integer = 1 + 2 + 3

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier)))
      (expression
        (binary_add
          (binary_add
            (primary_expression
              (literal
                (integer)))
            (primary_expression
              (literal
                (integer))))
          (primary_expression
            (literal
              (integer))))))))