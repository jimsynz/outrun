================
Complex guard expression with logical operators
================

def process(data: String): Result<ProcessedData, Error>
when String.not_empty?(value: data) && String.valid_format?(value: data) {
    Result.ok(value: process_data(data: data))
}

---

(source_file
  (item
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (identifier)
          (type_annotation
            (module_path
              (type_identifier)))))
      (return_type
        (type_annotation
          (module_path
            (type_identifier))
          (generic_args
            (type_annotation
              (module_path
                (type_identifier)))
            (type_annotation
              (module_path
                (type_identifier))))))
      (guard_clause
        (guard_expression
          (expression
            (binary_logical_and
              (primary_expression
                (identifier))
              (function_call_postfix
                (identifier)
                (argument_list
                  (argument
                    (named_argument
                      (identifier)
                      (expression
                        (primary_expression
                          (identifier)))))))
              (primary_expression
                (identifier))
              (function_call_postfix
                (identifier)
                (argument_list
                  (argument
                    (named_argument
                      (identifier)
                      (expression
                        (primary_expression
                          (identifier)))))))))))
      (block
        (statement
          (expression
            (primary_expression
              (identifier))
            (function_call_postfix
              (identifier)
              (argument_list
                (argument
                  (named_argument
                    (identifier)
                    (expression
                      (primary_expression
                        (function_call
                          (identifier)
                          (argument_list
                            (argument
                              (named_argument
                                (identifier)
                                (expression
                                  (primary_expression
                                    (identifier)))))))))))))))))))
