================
Struct with multiple constraints
================

struct Validator<T>(value: T) when T: Serializable && T: Validatable {
    def validate_and_serialize(self: Self): Result<String, Error> {
        self.value.validate()
    }
}

---

(source_file
  (item
    (struct_definition
      (type_identifier)
      (generic_params
        (generic_param
          (type_identifier)))
      (struct_fields
        (struct_field
          (identifier)
          (type_annotation
            (module_path
              (type_identifier)))))
      (trait_constraints
        (constraint_expression
          (binary_constraint_expression
            (constraint_expression
              (constraint_term
                (type_constraint
                  (type_identifier)
                  (type_annotation
                    (module_path
                      (type_identifier))))))
            (constraint_expression
              (constraint_term
                (type_constraint
                  (type_identifier)
                  (type_annotation
                    (module_path
                      (type_identifier)))))))))
      (function_definition
        (identifier)
        (parameter_list
          (parameter
            (identifier)
            (type_annotation)))
        (return_type
          (type_annotation
            (module_path
              (type_identifier))
            (generic_args
              (type_annotation
                (module_path
                  (type_identifier)))
              (type_annotation
                (module_path
                  (type_identifier))))))
        (block
          (statement
            (expression
              (primary_expression
                (identifier))
              (field_access
                (identifier))
              (field_access
                (identifier))))
          (statement
            (expression
              (primary_expression
                (tuple_literal)))))))))
