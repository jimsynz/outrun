================
Map with integer keys using => syntax
================

const NUMBERS: Map<Integer, Atom> = { 1 => :one, 2 => :two, 3 => :three }

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier))
        (generic_args
          (type_annotation
            (module_path
              (type_identifier)))
          (type_annotation
            (module_path
              (type_identifier)))))
      (expression
        (primary_expression
          (map_literal
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (integer))))
                (expression
                  (primary_expression
                    (literal
                      (atom
                        (identifier)))))))
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (integer))))
                (expression
                  (primary_expression
                    (literal
                      (atom
                        (identifier)))))))
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (integer))))
                (expression
                  (primary_expression
                    (literal
                      (atom
                        (identifier)))))))))))))

================
Map with atom keys using => syntax
================

const STATUS_CODES: Map<Atom, String> = { :success => "OK", :error => "Failed", :pending => "In Progress" }

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier))
        (generic_args
          (type_annotation
            (module_path
              (type_identifier)))
          (type_annotation
            (module_path
              (type_identifier)))))
      (expression
        (primary_expression
          (map_literal
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (atom
                        (identifier)))))
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (atom
                        (identifier)))))
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (atom
                        (identifier)))))
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))))))))

================
Map with mixed expression keys
================

const COMPLEX_MAP: Map<Any, String> = { 
    42 => "number",
    :symbol => "atom", 
    "string-key" => "string",
    true => "boolean"
}

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier))
        (generic_args
          (type_annotation
            (module_path
              (type_identifier)))
          (type_annotation
            (module_path
              (type_identifier)))))
      (expression
        (primary_expression
          (map_literal
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (integer))))
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (atom
                        (identifier)))))
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))
            (map_entry
              (map_key_value_pair
                (expression
                  (primary_expression
                    (literal
                      (boolean))))
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))))))))

================
Map with shorthand identifier syntax
================

const HEADERS: Map<Atom, String> = { user_agent: "Outrun/1.0", accept: "application/json" }

---

(source_file
  (item
    (constant_definition
      (type_identifier)
      (type_annotation
        (module_path
          (type_identifier))
        (generic_args
          (type_annotation
            (module_path
              (type_identifier)))
          (type_annotation
            (module_path
              (type_identifier)))))
      (expression
        (primary_expression
          (map_literal
            (map_entry
              (map_shorthand_pair
                (identifier)
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))
            (map_entry
              (map_shorthand_pair
                (identifier)
                (expression
                  (primary_expression
                    (literal
                      (string
                        (string_content)))))))))))))
