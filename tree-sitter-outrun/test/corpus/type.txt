===
unit type
===

type Foo

---

(source_file
  (type_def 
    (kw_type) 
    (ws) 
    (type_name 
      (constant_name)
    )
    (ws)
  )
)


===
paren'd unit type
===

type Bar()

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name (constant_name))
    (type_def_fields
      (op_lparen)
      (op_rparen)
    )
    (ws)
  )
)

===
paren'd unit type with spaces
===

type Bar ( )

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name (constant_name))
    (ws)
    (type_def_fields
      (op_lparen)
      (ws)
      (op_rparen)
    )
    (ws)
  )
)

===
type with single field
===

type Foo(bar: Bar)

---

(source_file 
  (type_def
    (kw_type)
    (ws)
    (type_name (constant_name))
    (type_def_fields
      (op_lparen)
      (type_def_field
        (ident_name)
        (sep_kw (op_colon) (ws))
        (type_name (constant_name))
      )
      (op_rparen)
    )
    (ws)
  )
)

===
type with multiple fields
===

type Foo(bar: Bar, baz: Baz)

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name (constant_name))
    (type_def_fields
      (op_lparen)
      (type_def_field
        (ident_name)
        (sep_kw (op_colon) (ws))
        (type_name (constant_name))
      )
      (sep_list (op_comma) (ws))
      (type_def_field
        (ident_name)
        (sep_kw (op_colon) (ws))
        (type_name (constant_name))
      )
      (op_rparen)
    )
    (ws)
  )
)


===
empty generic unit type
===

type Foo<>

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name
      (constant_name)
      (type_generic
        (op_lt)
        (op_gt)
      ))
    (ws)
  )
)

===
generic unit type
===

type Foo<Bar>

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name
      (constant_name)
      (type_generic
        (op_lt)
        (type_name (constant_name))
        (op_gt)
      )
    )
    (ws)
  )
)

===
generic single type
===

type Foo<T>(map: Map<T>)

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name
      (constant_name)
      (type_generic
        (op_lt)
        (type_name (constant_name))
        (op_gt)
      )
    )
    (type_def_fields
      (op_lparen)
      (type_def_field
        (ident_name)
        (sep_kw (op_colon) (ws))
        (type_name
          (constant_name)
          (type_generic
            (op_lt)
            (type_name (constant_name))
            (op_gt)
          )
        )
      )
      (op_rparen)
    )
    (ws)
  )
)

===
type generic multiple type
===

type Foo<T,V>(map: Map<T,V>, nice?: Boolean)

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name
      (constant_name)
      (type_generic
        (op_lt)
        (type_name (constant_name))
        (sep_list (op_comma))
        (type_name (constant_name))
        (op_gt)
      )
    )
    (type_def_fields
      (op_lparen)
      (type_def_field
        (ident_name)
        (sep_kw (op_colon) (ws))
        (type_name 
          (constant_name)
          (type_generic
            (op_lt)
            (type_name (constant_name))
            (sep_list (op_comma))
            (type_name (constant_name))
            (op_gt)
          )
        )
      )
      (sep_list (op_comma) (ws))
      (type_def_field
        (ident_name)
        (sep_kw (op_colon) (ws))
        (type_name (constant_name))
      )
      (op_rparen)
    )
    (ws)
  )
)

===
type with empty impl
===

type Foo { }

---

(source_file
  (type_def
    (kw_type)
    (ws)
    (type_name (constant_name))
    (ws)
    (type_def_impl
      (op_lbrace)
      (ws)
      (op_rbrace)
    )
  )
)
