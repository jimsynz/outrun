================
Generic trait implementation with constraints
================

impl<T> Container<T> for Box<T> when T: Clone {
    def get(self: Self): T {
        self.value.clone()
    }
}

---

(source_file
  (item
    (impl_block
      (generic_params
        (generic_param
          (type_identifier)))
      (trait_spec
        (module_path
          (type_identifier))
        (generic_args
          (type_annotation
            (module_path
              (type_identifier)))))
      (type_spec
        (module_path
          (type_identifier))
        (generic_args
          (type_annotation
            (module_path
              (type_identifier)))))
      (trait_constraints
        (constraint_expression
          (constraint_term
            (type_constraint
              (type_identifier)
              (type_annotation
                (module_path
                  (type_identifier)))))))
      (function_definition
        (identifier)
        (parameter_list
          (parameter
            (identifier)
            (type_annotation)))
        (return_type
          (type_annotation
            (module_path
              (type_identifier))))
        (block
          (statement
            (expression
              (primary_expression
                (identifier))
              (field_access
                (identifier))
              (function_call_postfix
                (identifier)))))))))
