================
Let binding with integer literal destructuring
================

let 42 = calculate_answer()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (literal
          (integer)))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Let binding with boolean literal destructuring
================

let true = is_valid_config()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (literal
          (boolean)))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Let binding with string literal destructuring
================

let "success" = get_status()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (literal
          (string
            (string_content))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Let binding with atom literal destructuring
================

let :ok = parse_result()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (literal
          (atom
            (identifier))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Let binding with float literal destructuring
================

let 3.14 = get_pi()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (literal
          (float)))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Let binding with large integer destructuring
================

let 9999 = get_max_value()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (literal
          (integer)))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Let binding with hex integer destructuring
================

let 0xFF = get_mask()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (literal
          (integer)))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))