================
Tuple with nested list destructuring
================

let (x, [a, b], y) = get_complex_data()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (tuple_destructure
          (destructure_pattern
            (identifier))
          (destructure_pattern
            (list_destructure
              (destructure_pattern
                (identifier))
              (destructure_pattern
                (identifier))))
          (destructure_pattern
            (identifier))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
List with nested tuple destructuring
================

let [first, (x, y), last] = get_coordinate_list()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (list_destructure
          (destructure_pattern
            (identifier))
          (destructure_pattern
            (tuple_destructure
              (destructure_pattern
                (identifier))
              (destructure_pattern
                (identifier))))
          (destructure_pattern
            (identifier))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Tuple with mixed patterns including literals
================

let (42, name, :status) = get_response()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (tuple_destructure
          (destructure_pattern
            (literal
              (integer)))
          (destructure_pattern
            (identifier))
          (destructure_pattern
            (literal
              (atom
                (identifier))))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
List with mixed patterns including literals
================

let [1, "success", result] = parse_response()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (list_destructure
          (destructure_pattern
            (literal
              (integer)))
          (destructure_pattern
            (literal
              (string
                (string_content))))
          (destructure_pattern
            (identifier))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Nested struct destructuring with inner patterns
================

let User { profile, settings } = get_user_data()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (struct_destructure
          (struct_destructure_start)
          (destructure_pattern
            (identifier))
          (destructure_pattern
            (identifier))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))

================
Complex nested pattern with multiple levels
================

let (id, [User { name }, :active], metadata) = get_full_record()

---

(source_file
  (item
    (let_binding
      (destructure_pattern
        (tuple_destructure
          (destructure_pattern
            (identifier))
          (destructure_pattern
            (list_destructure
              (destructure_pattern
                (struct_destructure
                  (struct_destructure_start)
                  (destructure_pattern
                    (identifier))))
              (destructure_pattern
                (literal
                  (atom
                    (identifier))))))
          (destructure_pattern
            (identifier))))
      (expression
        (primary_expression
          (function_call
            (identifier)))))))