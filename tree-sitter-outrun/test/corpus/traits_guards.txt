================
Trait with default implementation guard clause
================

trait SafeDivision {
    def divide(self: Self, other: Self): Self
    
    def safe_divide(self: Self, other: Self): Self
    when Self.non_zero?(other) {
        self.divide(other)
    }
}

---

(source_file
  (item
    (trait_definition
      (type_identifier)
      (trait_function
        (identifier)
        (parameter_list
          (parameter
            (identifier)
            (type_annotation))
          (parameter
            (identifier)
            (type_annotation)))
        (return_type
          (type_annotation)))
      (trait_function
        (identifier)
        (parameter_list
          (parameter
            (identifier)
            (type_annotation))
          (parameter
            (identifier)
            (type_annotation)))
        (return_type
          (type_annotation))
        (guard_clause
          (guard_expression
            (expression
              (primary_expression
                (identifier))
              (function_call_postfix
                (identifier)
                (argument_list
                  (argument
                    (shorthand_argument
                      (identifier))))))))
        (block
          (statement
            (expression
              (primary_expression
                (identifier))
              (function_call_postfix
                (identifier)
                (argument_list
                  (argument
                    (shorthand_argument
                      (identifier))))))))))))
