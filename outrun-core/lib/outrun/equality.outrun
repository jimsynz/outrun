@Doc(content: """
Equality trait for == and != operators.

The Equality trait defines the behaviour for equality comparison operators.
When you write `a == b`, it becomes `Equality.equal?(lhs: a, rhs: b)`.
When you write `a != b`, it becomes `Equality.not_equal?(lhs: a, rhs: b)`.

## Requirements

- Both operands must be the same concrete type
- The result is always Boolean
- Must satisfy equality laws: reflexive, symmetric, transitive
- `not_equal?` should be the logical negation of `equal?`
- Both functions are predicates and can be used in guard clauses

## Examples

```outrun
42 == 42                      # Equality.equal?(lhs: 42, rhs: 42): Boolean
"hello" != "world"            # Equality.not_equal?(lhs: "hello", rhs: "world"): Boolean
user1 == user2                # Equality.equal?(lhs: user1, rhs: user2): Boolean

# Used in guards
def process(x: Integer, y: Integer): String
when Equality.equal?(lhs: x, rhs: 0) {
    "zero"
}
```
""")
trait Equality {
    @Doc(content: "Test if two values are equal")
    def equal?(lhs: Self, rhs: Self): Boolean

    @Doc(content: "Test if two values are not equal")
    def not_equal?(lhs: Self, rhs: Self): Boolean
}
