@Doc(content: """
Generic list concrete type.

This is the default concrete implementation of lists in Outrun.
Lists are homogeneous linked lists (not vectors) designed for functional programming.
All elements must be of the same type T.

## Examples

```outrun
[1, 2, 3]                         # List of integers
["hello", "world"]                # List of strings
[head, ..tail]                   # List construction with head|tail syntax
[]                                # Empty list
```

## Type Parameters

- `T` - The type of elements stored in the list
""")
struct Outrun.Core.List<T>() {}


impl<T> Equality for Outrun.Core.List<T> when T: Equality {
    def equal?(lhs: Self, rhs: Self): Outrun.Core.Boolean {
        # Simplified implementation without pattern matching
        true  # TODO: Implement proper list equality
    }
}

impl<T> List<T> for Outrun.Core.List<T> {
    def head(value: Self): Option<T> {
        Outrun.Intrinsic.list_head(value: value)
    }

    def tail(value: Self): Self {
        Outrun.Intrinsic.list_tail(value: value)
    }

    def prepend(list: Self, elem: T): Self {
        Outrun.Intrinsic.list_prepend(list: list, elem: elem)
    }

    def length(value: Self): Integer {
        Outrun.Intrinsic.list_length(value: value)
    }
}

impl<T> Default for Outrun.Core.List<T> {
    def default(): Self {
        Outrun.Intrinsic.list_empty()
    }
}
