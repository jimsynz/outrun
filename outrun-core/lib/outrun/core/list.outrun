@Doc(content: """
Generic list concrete type.

This is the default concrete implementation of lists in Outrun.
Lists are homogeneous linked lists (not vectors) designed for functional programming.
All elements must be of the same type T.

## Examples

```outrun
[1, 2, 3]                         # List of integers
["hello", "world"]                # List of strings
[head, ..tail]                   # List construction with head|tail syntax
[]                                # Empty list
```

## Type Parameters

- `T` - The type of elements stored in the list
""")
struct Outrun.Core.List<T>() {}


# Equality protocol implementation - recursive equality check
impl Equality for Outrun.Core.List<T> when T: Equality {
    def equal?(lhs: Self, rhs: Self): Outrun.Core.Boolean {
        let lhs_head = List.head(value: lhs)
        let rhs_head = List.head(value: rhs)

        case (lhs_head, rhs_head) {
            (lhs_opt, rhs_opt) when Option.none?(value: lhs_opt) && Option.none?(value: rhs_opt) -> true
            (lhs_opt, rhs_opt) when Option.some?(value: lhs_opt) && Option.some?(value: rhs_opt) ->
                Equality.equal?(lhs: Option.unwrap(value: lhs_opt), rhs: Option.unwrap(value: rhs_opt)) &&
                Equality.equal?(lhs: List.tail(value: lhs), rhs: List.tail(value: rhs))
            _ -> false
        }
    }
}

# List protocol implementation
impl List<T> for Outrun.Core.List<T> {
    def head(value: Self): Option<T> {
        Outrun.Intrinsic.list_head(value: value)
    }

    def tail(value: Self): Self {
        Outrun.Intrinsic.list_tail(value: value)
    }

    def prepend(list: Self, elem: T): Self {
        Outrun.Intrinsic.list_prepend(list: list, elem: elem)
    }

    def length(value: Self): Integer {
        Outrun.Intrinsic.list_length(value: value)
    }
}

# Default protocol implementation
impl Default for Outrun.Core.List<T> {
    def default(): Self {
        Outrun.Intrinsic.list_empty()
    }
}
