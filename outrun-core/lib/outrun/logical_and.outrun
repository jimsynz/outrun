@Doc(content: """
Logical AND protocol for the && operator.

The LogicalAnd protocol defines the behaviour for the && operator.
When you write `a && b`, it becomes `LogicalAnd.and(lhs: a, rhs: b)`.

## Requirements

- Both operands must be the same concrete type (typically Boolean)
- The result must be the same concrete type as the operands
- Should support short-circuiting (if left is false, don't evaluate right)
- Must satisfy logical laws: associative, commutative, idempotent

## Examples

```outrun
true && false                 # LogicalAnd.and(lhs: true, rhs: false): Boolean
user.active? && user.verified?  # LogicalAnd.and(lhs: user.active?, rhs: user.verified?): Boolean
```
""")
protocol LogicalAnd {
    @Doc(content: "Perform logical AND on two values")
    def and(lhs: Self, rhs: Self): Self
}
