@Doc(content: """
Trait for parsing sigil literals into custom types with structured input.
Sigils allow custom syntax like ~JSON"{}" or ~SQL"SELECT * FROM #{table}" with safe interpolation.
""")
trait Sigil<T> {
  @Doc(content: """
  Parse structured sigil content into this type.
  Input contains both literal strings and interpolated expressions as separate parts,
  allowing implementations to handle escaping and type safety appropriately.
  Called automatically when sigil syntax ~Type"content with #{interpolation}" is used.
  """)
  def parse(input: List<Sigil.Input<T>>): Self
}

@Doc(content: """
Marker trait for sigil input parts.
Sigil input consists of alternating string literals and interpolated expressions.
""")
trait Sigil.Input<T> {
}

@Doc(content: """
String literal part of a sigil.
Contains raw text content that should be treated literally.
""")
struct Sigil.Input.String(content: String)

@Doc(content: """
Interpolated expression part of a sigil.
Contains a typed value that was interpolated using #{expression} syntax.
""")
struct Sigil.Input.Expression<T>(value: T)

# Implement the marker trait for both concrete input types
impl Sigil.Input<T> for Sigil.Input.String { }
impl Sigil.Input<T> for Sigil.Input.Expression<T> { }