# Example Outrun file demonstrating structs and traits
# This showcases the core language features and syntax

# Define a trait for objects that can be displayed as strings
trait Display {
    def to_string(self: Self): String
    def debug_string(self: Self): String
}

# Define a User struct with fields and methods
struct User(name: String, email: String, age: Integer) {
    # Constructor function
    def new(name: String, email: String, age: Integer): User {
        User { name: name, email: email, age: age }
    }

    # Method to get full user info
    def full_info(self: Self): String {
        "#{self.name} (#{self.email}) - Age: #{self.age}"
    }

    # Method to check if user is adult
    def is_adult?(self: Self): Boolean 
    when Integer.greater_than_or_equal?(self.age, target: 18) {
        true
    }

    # Private method for validation
    defp validate_email?(email: String): Boolean {
        String.contains?(email, pattern: "@")
    }
}

# Implement the Display trait for User
impl Display for User {
    def to_string(self: Self): String {
        "User: #{self.name}"
    }

    def debug_string(self: Self): String {
        "User { name: \"#{self.name}\", email: \"#{self.email}\", age: #{self.age} }"
    }
}

# Define a Product struct with different field types
struct Product(name: String, price: Float, in_stock: Boolean, categories: List) {
    # Factory method
    def create(name: String, price: Float): Product {
        Product { 
            name: name, 
            price: price, 
            in_stock: true, 
            categories: [] 
        }
    }

    # Method to calculate discounted price
    def discounted_price(self: Self, discount: Float): Float 
    when Float.between?(discount, min: 0.0, max: 1.0) {
        self.price * (1.0 - discount)
    }

    # Method to add category
    def add_category(self: Self, category: String): Product {
        let updated_categories = List.append(self.categories, item: category)
        Product { ..self, categories: updated_categories }
    }
}

# Implement Display for Product
impl Display for Product {
    def to_string(self: Self): String {
        "#{self.name} - $#{Float.to_string(self.price)}"
    }

    def debug_string(self: Self): String {
        "Product { name: \"#{self.name}\", price: #{self.price}, in_stock: #{self.in_stock} }"
    }
}

# Define some constants
const DEFAULT_ADULT_AGE: Integer = 18
const TAX_RATE: Float = 0.15
const SYSTEM_NAME: String = "Outrun Commerce System"

# Example usage function
def main(): Integer {
    # Create some users
    let alice = User.new(name: "Alice Johnson", email: "alice@example.com", age: 25)
    let bob = User.new(name: "Bob Smith", email: "bob@example.com", age: 16)
    
    # Create some products
    let laptop = Product.create(name: "Gaming Laptop", price: 1299.99)
    let book = Product.create(name: "Outrun Programming Guide", price: 49.99)
    
    # Add categories to products
    let laptop_with_categories = laptop
        |> Product.add_category(category: "Electronics")
        |> Product.add_category(category: "Computers")
    
    # Check if users are adults
    let alice_adult = User.is_adult?(alice)
    let bob_adult = User.is_adult?(bob)
    
    # Calculate discounted price
    let discounted_laptop_price = Product.discounted_price(laptop_with_categories, discount: 0.1)
    
    # Display information using trait methods
    IO.puts(Display.to_string(alice))
    IO.puts(Display.to_string(bob))
    IO.puts(Display.debug_string(laptop_with_categories))
    
    # Print results
    IO.puts("Alice is adult: #{Boolean.to_string(alice_adult)}")
    IO.puts("Bob is adult: #{Boolean.to_string(bob_adult)}")
    IO.puts("Discounted laptop price: $#{Float.to_string(discounted_laptop_price)}")
    
    0
}