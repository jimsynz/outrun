{
  "name": "Outrun",
  "scopeName": "source.outrun",
  "fileTypes": ["outrun"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#literals" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.outrun",
          "begin": "###",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin.outrun" }
          },
          "end": "###",
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end.outrun" }
          }
        },
        {
          "name": "comment.line.number-sign.outrun",
          "begin": "#",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.outrun" }
          },
          "end": "$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.outrun",
          "match": "\\b(def|let|const|if|else|case|when|struct|trait|impl|macro|alias|import|except|only)\\b"
        },
        {
          "name": "constant.language.boolean.outrun",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.other.self.outrun",
          "match": "\\b(Self)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.module.outrun",
          "match": "\\b[A-Z][a-zA-Z0-9_]*(?:\\.[A-Z][a-zA-Z0-9_]*)*\\b"
        },
        {
          "name": "support.type.outrun",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "punctuation.separator.type.outrun",
          "match": ":\\s*(?=[A-Z])"
        }
      ]
    },
    "literals": {
      "patterns": [
        { "include": "#multiline-strings" },
        { "include": "#basic-strings" },
        { "include": "#sigils" },
        { "include": "#atoms" },
        { "include": "#numbers" }
      ]
    },
    "multiline-strings": {
      "name": "string.quoted.triple.outrun",
      "begin": "\"\"\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.outrun" }
      },
      "end": "\"\"\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.outrun" }
      },
      "patterns": [
        { "include": "#string-interpolation" }
      ]
    },
    "basic-strings": {
      "name": "string.quoted.double.outrun",
      "begin": "\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.outrun" }
      },
      "end": "\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.outrun" }
      },
      "patterns": [
        { "include": "#string-interpolation" },
        { "include": "#string-escapes" }
      ]
    },
    "string-interpolation": {
      "name": "meta.interpolation.outrun",
      "begin": "#{",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.interpolation.begin.outrun" }
      },
      "end": "}",
      "endCaptures": {
        "0": { "name": "punctuation.definition.interpolation.end.outrun" }
      },
      "patterns": [
        { "include": "$self" }
      ]
    },
    "string-escapes": {
      "patterns": [
        {
          "name": "constant.character.escape.outrun",
          "match": "\\\\[ntr\\\\\"]"
        },
        {
          "name": "constant.character.escape.unicode.outrun",
          "match": "\\\\u[0-9a-fA-F]{4}"
        },
        {
          "name": "invalid.illegal.escape.outrun",
          "match": "\\\\."
        }
      ]
    },
    "sigils": {
      "name": "string.other.sigil.outrun",
      "begin": "~[A-Z][a-zA-Z0-9_]*\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.outrun" }
      },
      "end": "\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.outrun" }
      },
      "patterns": [
        { "include": "#string-interpolation" }
      ]
    },
    "atoms": {
      "patterns": [
        {
          "name": "constant.other.symbol.atom.outrun",
          "match": ":[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "constant.other.symbol.quoted.outrun",
          "begin": ":\"",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.symbol.begin.outrun" }
          },
          "end": "\"",
          "endCaptures": {
            "0": { "name": "punctuation.definition.symbol.end.outrun" }
          },
          "patterns": [
            { "include": "#string-escapes" }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.hexadecimal.outrun",
          "match": "\\b0x[0-9a-fA-F]+"
        },
        {
          "name": "constant.numeric.integer.binary.outrun",
          "match": "\\b0b[01]+"
        },
        {
          "name": "constant.numeric.integer.octal.outrun",
          "match": "\\b0o[0-7]+"
        },
        {
          "name": "constant.numeric.float.scientific.outrun",
          "match": "\\b\\d+\\.\\d+[eE][+-]?\\d+"
        },
        {
          "name": "constant.numeric.float.outrun",
          "match": "\\b\\d+\\.\\d+"
        },
        {
          "name": "constant.numeric.integer.decimal.outrun",
          "match": "\\b\\d+"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.pipe.outrun",
          "match": "\\|>|\\|\\?"
        },
        {
          "name": "keyword.operator.logical.outrun",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.comparison.outrun",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.bitwise.outrun",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.arithmetic.outrun",
          "match": "\\+|-|\\*|/|%|\\*\\*"
        },
        {
          "name": "keyword.operator.assignment.outrun",
          "match": "=|\\.\\.\\."
        },
        {
          "name": "keyword.operator.accessor.outrun",
          "match": "\\.|&"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.definition.group.outrun",
          "match": "[(){}\\[\\]]"
        },
        {
          "name": "punctuation.separator.outrun",
          "match": "[,;]"
        },
        {
          "name": "punctuation.separator.mapping.outrun",
          "match": "=>"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.outrun",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "entity.name.function.outrun",
          "match": "\\b[a-z_][a-zA-Z0-9_]*(?=\\s*\\()"
        }
      ]
    }
  }
}
